# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    types:
      - closed
    branches: [ "master" ]


permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set YML
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
        find src
        
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build
    
    ## 웹 이미지 빌드 및 도커허브에 push
    - name: docker build and push
      run: |
        docker build --platform=linux/arm64 -t sns-project-springboot:latest .
        docker save -o image.tar sns-project-springboot:latest
        sudo apt-get update && sudo apt-get install -y sshpass
        sshpass -p ${{ secrets.SSH_PASSWORD }} -P ${{ secrets.SSH_PORT }} image.tar ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}

    ## docker compose up
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
#         key: ${{ secrets.KEY }}
        script: |
          cd /home/${{ secrets.SSH_USERNAME }}
          sudo docker rm -f $(docker ps -qa)
          docker load -i image.tar
          docker compose up -d
          docker image prune -f
